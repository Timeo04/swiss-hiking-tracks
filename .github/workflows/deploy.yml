name: Build and deploy to FTP

on:
  push:
    branches: [ "main" ]  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  laravel-deploy:
    name: ðŸŽ‰ Deploy
    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
    - name: ðŸšš Get latest code
      uses: actions/checkout@v4
    # - name: Copy .env
    #   run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Production Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --no-dev
    - name: NPM clean install
      run: npm ci
    - name: Build
      run: npm run build --if-present

    - name: Cleanup empty files
      run: find . -type f -empty -print -delete

    # - name: Cleanup vite timestamp
    #   run: find . -type f -name vite.config.js.timestamp\* -exec rm {} \;
          
    # - name: ðŸ“‚ Sync files
    #   uses: SamKirkland/FTP-Deploy-Action@v4.3.4
    #   with:
    #     server: ${{ vars.FTP_SERVER_URL }}
    #     username: ${{ vars.FTP_USER_NAME }}
    #     password: ${{ secrets.FTP_PASSWORD }}
    #     server-dir: ./
    #     exclude: |
    #       **/.git*
    #       **/.git*/**
    #       **/.env
    #       **/node_modules/**
    #     protocol: ftps
    #     port: 21
    #     timeout: 600000
        # dry-run: true

    - name: "Deploy"
      uses: milanmk/actions-file-deployer@master
      with:
        remote-protocol: "ftp"
        remote-host: ${{ vars.FTP_SERVER_URL }}
        remote-user: ${{ vars.FTP_USER_NAME }}
        remote-password: ${{ secrets.FTP_PASSWORD }}
        remote-port: 21
        # remote-path: "/"
        sync: full

    - name: Trigger migrations
      uses: fjogeleit/http-request-action@v1.15.2
      with:
        url: 'https://swisshikingtracks.ch/migrate'
        method: 'GET'
        
    # - name: Generate key
    #   run: php artisan key:generate
    # - name: Directory Permissions
    #   run: chmod -R 777 storage bootstrap/cache
    # - name: Create Database
    #   run: |
    #     mkdir -p database
    #     touch database/database.sqlite
    # - name: Execute tests (Unit and Feature tests) via PHPUnit
    #   env:
    #     DB_CONNECTION: sqlite
    #     DB_DATABASE: database/database.sqlite
    #   run: vendor/bin/phpunit
